#!/usr/bin/env ruby
require_relative '../boot'

class DbaCLI < Thor
  map ["-l", :list] => :ls

  desc 'ls [DB]', 'list db names'
  def ls(db = nil)
    if db
      conn = get_conn_builder(db)
      puts "#{db} #{conn.url}"
    else
      puts $dbs.keys
    end
  end

  desc 'url [DB]', 'get db url'
  def url(db = nil)
    if db
      puts get_conn_builder(db)&.url
    else
      puts $dbs.values.map(&:url)
    end
  end

  desc 'cli [DB_or_URL]', 'into db cli'
  option :sequel, type: :boolean, banner: 'use sequel', aliases: [:seq]
  option :psql, type: :boolean, banner: 'use psql'
  option :runner, default: 'pgcli', banner: '[psql|sequel| pgcli]'
  def cli(db = nil)
    conn = get_conn_builder(db)
    runner = 'sequel' if options[:sequel]
    runner = 'psql' if options[:psql]
    runner ||= options[:runner]
    conn.cli(runner: runner)
  end # def

  desc 'runsqlet FILE URL', 'run ruby file or stdin'
  option :code, banner: 'db script to run', aliases: [:c]
  def runsqlet(file = nil, url = nil)
    code = options[:code]
    if code # high priority
      url = file
      file = nil
    else
      fpath = Pathname(file)
      code = fpath.read
    end
    conn = get_conn_builder(url)
    runner = conn.script_runner
    bd = runner.get_binding
    if file
      eval code, bd, file
    else
      eval code, bd
    end
  end

  desc 'runsql [FILE] [URL]', 'run ruby file or stdin'
  option :code, banner: 'sql script', aliases: [:c]
  option :line, banner: 'line by line', aliases: [:l]
  def runsql(file = nil, url = nil)
    code = options[:code]
    if code
      url = file
      file = nil
    else
      fpath = Pathname(file)
      code = fpath.read.split("\n").map do |l|
        next if l =~ /^\s*[#\-]/
        next if l =~ /^\s*$/
        l
      end.compact.join("\n")
    end
    conn = get_conn_builder(url)
    if options[:line]
      codes = code.split(/;/m)
    else
      codes = [code]
    end
    codes.each_with_index do |seg, idx|
      puts "==#{idx} run sql"
      puts seg
      r = conn.run_sql seg
      puts "==result"
      puts r.output
    end
  end
end

def get_conn_builder(db = nil)
  if Dba::Util.is_url?(db)
    return Dba::ConnectionBuilder.new(url: db)
  end 
  db ||= ENV['db']
  unless db
    names = $dbs.keys
    if pat = ENV['pattern']
      names = names.select{|n| n =~ /#{pat}/ } 
    end

    require 'tty-prompt'
    prompt = TTY::Prompt.new
    db = prompt.select('Choose db?', names, enum: ')', per_page: 20)
  end
  abort "No db specified!" unless db
  $dbs[db]
rescue LoadError => e
  # todo call in rails console, get error 
  #kgem = Kernel.method(:gem)
  #kgem.call 'tty-prompt'
  #retry
  warn e
end

DbaCLI.start
