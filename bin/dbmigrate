#!/usr/bin/env ruby
require_relative '../boot'
class DbMigCLI < Thor
  class_option :debug, type: :boolean, aliases: [:d]
  class_option :dry, type: :boolean
  class_option :quiet, type: :boolean, aliases: [:q]
  class_option :force, type: :boolean, aliases: [:f]

  desc 'init', 'init db project structure'
  def init
    # /xdbprj/    --current path
    # |------/db/
    # |------/db/init.rb
    # |------/db/migrate/
    # |------/db/seed.rb
    mig_path.mkpath
    puts "inited db prj at #{db_path}"
  end

  desc 'tree', 'migration files'
  def tree
    exec "tree #{db_path}"
  end

  desc 'test', 'test all'
  def test(tpath = Pathname(__dir__).join('../tmp/test-dbmigrate'))
    dbname = "dbmig_test#{Time.now.to_i}"
    adminurl = "postgres://localhost/postgres"
    puts "working path: #{tpath}"
    puts "target db: #{dbname} with #{adminurl}"

    cmds = <<~Desc
      # setup
      [ -d '#{tpath}' ] && rm -fr #{tpath} 
      mkdir -p #{tpath} && cd #{tpath}
      # try ops
      dbmigrate init
      dbmigrate generate create_todos
      dbmigrate createdb #{adminurl} #{dbname}
      dbmigrate migrate #{adminurl} #{dbname}
      dbmigrate tree
      cat <<-SQL | dbcli runsql - #{adminurl} -l
        drop database if exists #{dbname}; 
        select datname from pg_catalog.pg_database;
      SQL
    Desc
    unless options[:quiet]
      puts 
      puts "# run shell commands"
      puts cmds
    end
    system cmds unless options[:dry]
  end

  desc 'generate NAME', 'generate a migration file'
  option :edit, type: :boolean, aliases: [:e]
  def generate(migname)
    tmpl = DATA.read
    result = ERB.render(tmpl, binding)
    
    ts = Time.now.strftime("%Y%m%d%H%M%S")
    fname = "#{ts}_#{migname}.rb"
    fpath = mig_path.join(fname)
    fpath.write(result)
    puts "generated file: #{fpath.to_s}"
    exec "vi #{fpath.to_s}" if options[:edit]
  end

  desc 'ref', 'open ref doc'
  def ref
    puts "http://sequel.jeremyevans.net/documentation.html"
    cmd = "open http://sequel.jeremyevans.net/rdoc/files/doc/schema_modification_rdoc.html "
    puts cmd
    exec cmd
  end

  desc 'migrate URL', 'run migrations'
  option :version, banner: 'run to version, 0 to down all', aliases: [:v]
  def migrate(url, ver: nil)
    dburl = get_dburl(url)
    version = options[:version] || ver

    path = mig_path
    cmd = "sequel -m #{path.to_s}"
    cmd += " -M #{version}" if version
    cmd += " #{dburl}" 
    puts cmd
    #exec cmd
    %x( #{cmd} )
  end
  map "up" => "migrate"

  desc 'reset URL', 'reset db, rollback all migrations'
  def reset(url)
    invoke :migrate, [url], { version: 0 }
  end

  desc 'dump URL', 'dump db schema'
  def dump(url)
    dburl = get_dburl(url)
    cmd = "sequel -D #{dburl}" # use vendor specific
    puts cmd
    exec cmd
  end

  desc 'createdb URL [DBNAME]', 'create db'
  option :opts, banner: 'create db options'
  def createdb(url, newdb=nil)
    dburl = get_dburl(url)
    unless dburl && !dburl.empty?
      dburl = "postgres://localhost/#{url}"
    end

    # get new db conn info
    conn = Dba::ConnectionBuilder.new(url: dburl)
    if newdb
      conn = conn.fork(dbname: newdb)
    end
    dbname = conn.dbname 
    if options[:debug]
      puts "==will create db: #{conn.url} from #{url} #{newdb}" 
    end

    ## do on postgres or template1 db
    opsconn = conn.fork(dbname: 'template1')
    # DROP DATABASE cannot be executed from a function or multi-command string!
    if options[:force]
      sql = "drop database if exists #{dbname}" 
      puts sql unless options[:quiet]
      opsconn.run_sql sql unless options[:dry]
    end
    sql = "create database #{dbname} #{options[:opts]}"
    puts sql unless options[:quiet]
    opsconn.run_sql sql unless options[:dry]
  end

  desc 'seed URL', 'seed data'
  def seed(url)
    path = db_path.join('seed.rb')
    cmd = "#{path} #{url}"
    puts cmd
    system cmd
  end

  no_commands do
    def db_path
      Pathname.pwd.join('db')
    end

    def mig_path
      db_path.join('migrate')
    end

    def get_dburl(url)
      return url if Dba::Util.is_url?(url)
      `dbcli url #{url}`.chomp
    end
  end
end
DbMigCLI.start

__END__
# http://sequel.jeremyevans.net/rdoc/files/doc/schema_modification_rdoc.html
Sequel.migration do
  up do
    # extension :pg_enum
    create_table(:todos) do
      primary_key :id
      String :name, null: false #, :index=>true
      DateTime :created_at, default: Sequel::CURRENT_TIMESTAMP
      DateTime :updated_at, default: Sequel::CURRENT_TIMESTAMP
    end
  end

  down do
    drop_table(:todos)
  end
end
